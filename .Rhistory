ridge_regression <- function(form, data, lambda = 0) {
#  rownames(data) <- NULL
X <- model.matrix(form, data)
# Y <- data[as.numeric(rownames(X)), as.character(form)[2]]
browser()
Y <- data[[as.character(form)[2]]][as.numeric(rownames(X))]
ret <- solve( crossprod(X) + diag(rep(lambda, ncol(X))) ) %*% t(X) %*% Y
attributes(ret)$formula <- form
class(ret) <- c(class(ret), "ridge_regression")
ret
}
iris
load(iris)
ridge_regression(Sepal.Length~Sepal.Width, iris, 0.1)
ridge_regression <- function(form, data, lambda = 0) {
#  rownames(data) <- NULL
X <- model.matrix(form, data)
# Y <- data[as.numeric(rownames(X)), as.character(form)[2]]
Y <- data[[as.character(form)[2]]][as.numeric(rownames(X))]
ret <- solve( crossprod(X) + diag(rep(lambda, ncol(X))) ) %*% t(X) %*% Y
attributes(ret)$formula <- form
class(ret) <- c(class(ret), "ridge_regression")
ret
}
ridge_regression(Sepal.Length~Sepal.Width, iris, 0.1)
x<-ridge_regression(Sepal.Length~Sepal.Width, iris, 0.1)
ridge_predict(x)
ridge_predict <- function(object, ...) {
dots <- list(...)
x_frame <- dots[[1]]
if (!is.data.frame(x_frame)) {
stop(red("The first argument should be a data.frame of values",
"to predict"))
}
X <- model.matrix(attributes(object)$formula, x_frame)
X %*% object
}
ridge_predict(x)
x<-ridge_regression(Sepal.Length~Sepal.Width, iris, 0.1)
ridge_regression <- function(form, data, lambda = 0) {
#  rownames(data) <- NULL
X <- model.matrix(form, data)
# Y <- data[as.numeric(rownames(X)), as.character(form)[2]]
Y <- data[[as.character(form)[2]]][as.numeric(rownames(X))]
ret <- solve( crossprod(X) + diag(rep(lambda, ncol(X))) ) %*% t(X) %*% Y
attributes(ret)$formula <- form
class(ret) <- c(class(ret), "ridge_regression")
ret
}
x<-ridge_regression(Sepal.Length~Sepal.Width, iris, 0.1)
ridge_predict(x)
ridge_predict <- function(object, ...) {
dots <- list(...)
x_frame <- dots[[1]]
if (!is.data.frame(x_frame)) {
stop(red("The first argument should be a data.frame of values",
"to predict"))
}
X <- model.matrix(attributes(object)$formula, x_frame)
X %*% object
}
ridge_predict(x)
ridge_predict(x, iris$Sepal.Width)
ridge_predict(x, iris)
iris$Sepal.Length
vfold_cv(iris)
library(rsample)
library("rsample")
install.packages("rsample")
library(rsample)
vfold_cv(irisï¼Œ10)
vfold_cv(iris, 10)
train1 <- training(folds$splits[[1]])
folds <- vfold_cv(iris, 10)
train1 <- training(folds$splits[[1]])
test1 <- testing(folds$splits[[1]])
rmses <- foreach(lambda = lambdas, .combine = rbind) %dopar% {
foreach(i = seq_len(nrow(folds)), .combine = c) %do% {
casl_util_rmse(testing(folds$splits[[i]])$duration,
predict(ridge_regression(form, training(folds$splits[[i]]),
lambda = lambda),
testing(folds$splits[[i]])))
}
}
library(doParallel)
install.packages("doParallel")
rmses <- foreach(lambda = lambdas, .combine = rbind) %dopar% {
foreach(i = seq_len(nrow(folds)), .combine = c) %do% {
casl_util_rmse(testing(folds$splits[[i]])$duration,
predict(ridge_regression(form, training(folds$splits[[i]]),
lambda = lambda),
testing(folds$splits[[i]])))
}
}
library(doParallel)
rmses <- foreach(lambda = lambdas, .combine = rbind) %dopar% {
foreach(i = seq_len(nrow(folds)), .combine = c) %do% {
casl_util_rmse(testing(folds$splits[[i]])$duration,
predict(ridge_regression(form, training(folds$splits[[i]]),
lambda = lambda),
testing(folds$splits[[i]])))
}
}
registerDoParallel(6)
rmses <- foreach(lambda = lambdas, .combine = rbind) %dopar% {
foreach(i = seq_len(nrow(folds)), .combine = c) %do% {
casl_util_rmse(testing(folds$splits[[i]])$duration,
predict(ridge_regression(form, training(folds$splits[[i]]),
lambda = lambda),
testing(folds$splits[[i]])))
}
}
rmses <- foreach(lambda = (0.1,0.2), .combine = rbind) %dopar% {
foreach(i = seq_len(nrow(folds)), .combine = c) %do% {
casl_util_rmse(testing(folds$splits[[i]])$duration,
predict(ridge_regression(form, training(folds$splits[[i]]),
lambda = lambda),
testing(folds$splits[[i]])))
}
}
rmses <- foreach(lambda = c(0.1, 0.2), .combine = rbind) %dopar% {
foreach(i = seq_len(nrow(folds)), .combine = c) %do% {
casl_util_rmse(testing(folds$splits[[i]])$duration,
predict(ridge_regression(form, training(folds$splits[[i]]),
lambda = lambda),
testing(folds$splits[[i]])))
}
}
library(casl)
install.packages("casl")
install.packages("casl")
devtools::install_github("statsmaths/casl")
registerDoParallel(6)
library(rsample)
folds <- vfold_cv(iris, 10)
View(folds)
training(folds$splits[[1]])
testing(folds$splits[[1]])
range(10)
range(1,10)
range(1,10,1)
seq(1,10,1)
seq(10)
library(casl)
library(doParallel)
registerDoParallel(6)
folds <- vfold_cv(iris, 10)
?casl_util_rmse
form <- Sepal.Length~Sepal.Width
form[1]
form[2]
form[[2]]
rmses <- foreach(lambda = c(0.1,0.2), .combine = rbind) %dopar% {
foreach(i = seq_len(nrow(folds)), .combine = c) %do% {
casl_util_rmse(testing(folds$splits[[i]])$form[[2]],
ridge_predict(ridge_regression(form, training(folds$splits[[i]]),
lambda = lambda),
testing(folds$splits[[i]])))
}
}
ridge_predict <- function(object, ...) {
dots <- list(...)
x_frame <- dots[[1]]
if (!is.data.frame(x_frame)) {
stop(red("The first argument should be a data.frame of values",
"to predict"))
}
X <- model.matrix(attributes(object)$formula, x_frame)
X %*% object
}
ridge_regression <- function(form, data, lambda = 0) {
#  rownames(data) <- NULL
X <- model.matrix(form, data)
# Y <- data[as.numeric(rownames(X)), as.character(form)[2]]
Y <- data[[as.character(form)[2]]][as.numeric(rownames(X))]
ret <- solve( crossprod(X) + diag(rep(lambda, ncol(X))) ) %*% t(X) %*% Y
attributes(ret)$formula <- form
class(ret) <- c(class(ret), "ridge_regression")
ret
}
rmses <- foreach(lambda = c(0.1,0.2), .combine = rbind) %dopar% {
foreach(i = seq_len(nrow(folds)), .combine = c) %do% {
casl_util_rmse(testing(folds$splits[[i]])$form[[2]],
ridge_predict(ridge_regression(form, training(folds$splits[[i]]),
lambda = lambda),
testing(folds$splits[[i]])))
}
}
View(rmses)
?foreach
rmses <- foreach(lambda = c(0.1,0.2), .combine = rbind) %dopar% {
foreach(i = seq_len(nrow(folds)), .combine = c) %do% {
casl_util_rmse(testing(folds$splits[[i]])$form[[2]],
ridge_predict(ridge_regression(form, training(folds$splits[[i]]),
lambda = lambda),
testing(folds$splits[[i]])))
}
}
seq_len(nrow(folds)
seq_len(nrow(folds))
seq_len(nrow(folds))
registerDoParallel(6)
folds <- vfold_cv(iris, 10)
rmses <- foreach(lambda = c(0.1,0.2), .combine = rbind) %dopar% {
foreach(i = seq_len(nrow(folds)), .combine = c) %do% {
casl_util_rmse(testing(folds$splits[[i]])$form[[2]],
ridge_predict(ridge_regression(form, training(folds$splits[[i]]),
lambda = lambda),
testing(folds$splits[[i]])))
}
}
rmses <- foreach(lambda = c(0.1,0.2), .combine = rbind) %dopar% {
foreach(i = seq_len(nrow(folds)), .combine = c) %do% {
casl_util_rmse(testing(folds$splits[[i]])$form[[2]],
ridge_predict(ridge_regression(form, training(folds$splits[[i]]), lambda), testing(folds$splits[[i]])))
}
}
library(rsample)
library(doParallel)
registerDoParallel(6)
folds <- vfold_cv(iris, 10)
rmses <- foreach(lambda = c(0.1,0.2), .combine = rbind) %dopar% {
foreach(i = seq_len(nrow(folds)), .combine = c) %do% {
casl_util_rmse(testing(folds$splits[[i]])$form[[2]],
ridge_predict(ridge_regression(form, training(folds$splits[[i]]), lambda), testing(folds$splits[[i]])))
}
}
library(casl)
rmses <- foreach(lambda = c(0.1,0.2), .combine = rbind) %dopar% {
foreach(i = seq_len(nrow(folds)), .combine = c) %do% {
casl_util_rmse(testing(folds$splits[[i]])$form[[2]],
ridge_predict(ridge_regression(form, training(folds$splits[[i]]), lambda), testing(folds$splits[[i]])))
}
}
ridge_regression <- function(form, data, lambda = 0) {
#  rownames(data) <- NULL
X <- model.matrix(form, data)
# Y <- data[as.numeric(rownames(X)), as.character(form)[2]]
Y <- data[[as.character(form)[2]]][as.numeric(rownames(X))]
ret <- solve( crossprod(X) + diag(rep(lambda, ncol(X))) ) %*% t(X) %*% Y
attributes(ret)$formula <- form
class(ret) <- c(class(ret), "ridge_regression")
ret
}
ridge_predict <- function(object, ...) {
dots <- list(...)
x_frame <- dots[[1]]
if (!is.data.frame(x_frame)) {
stop(red("The first argument should be a data.frame of values",
"to predict"))
}
X <- model.matrix(attributes(object)$formula, x_frame)
X %*% object
}
rmses <- foreach(lambda = c(0.1,0.2), .combine = rbind) %dopar% {
foreach(i = seq_len(nrow(folds)), .combine = c) %do% {
casl_util_rmse(testing(folds$splits[[i]])$form[[2]],
ridge_predict(ridge_regression(form, training(folds$splits[[i]]), lambda), testing(folds$splits[[i]])))
}
}
form <- Sepal.Length~Sepal.Width
rmses <- foreach(lambda = c(0.1,0.2), .combine = rbind) %dopar% {
foreach(i = seq_len(nrow(folds)), .combine = c) %do% {
casl_util_rmse(testing(folds$splits[[i]])$form[[2]],
ridge_predict(ridge_regression(form, training(folds$splits[[i]]), lambda), testing(folds$splits[[i]])))
}
}
testing(folds$splits[[i]])$form[[2]]
testing(folds$splits[[1]])$form[[2]]
testing(folds$splits[[1]])$"form[[2]]"
testing(folds$splits[[1]])$'form[[2]]'
testing(folds$splits[[1]])$as.character(form[[2]])
form[[2]]
testing(folds$splits[[1]])["form[[2]]"]
testing(folds$splits[[1]])
testing(folds$splits[[1]])$Sepel.Length
testing(folds$splits[[1]])$(Sepel.Length)
testing(folds$splits[[1]])$"Sepel.Length"
testing(folds$splits[[1]])$"Sepal.Length"
testing(folds$splits[[1]])$"form[[2]]"
testing(folds$splits[[1]])[[as.character(formula[2])]]
testing(folds$splits[[1]])[[as.character(formula[2])]]
testing(folds$splits[[1]])[as.character(formula[2])]
testing(folds$splits[[1]])[[as.character(form[2])]]
casl_util_rmse(testing(folds$splits[[i]])[[as.character(form[2])]],
ridge_predict(ridge_regression(form, training(folds$splits[[i]]), lambda), testing(folds$splits[[i]])))
rmses <- foreach(lambda = c(0.1,0.2), .combine = rbind) %dopar% {
foreach(i = seq_len(nrow(folds)), .combine = c) %do% {
casl_util_rmse(testing(folds$splits[[i]])[[as.character(form[2])]],
ridge_predict(ridge_regression(form, training(folds$splits[[i]]), lambda), testing(folds$splits[[i]])))
}
}
View(rmses)
form[[2]]
casl_util_rmse(testing(folds$splits[[i]])[[as.character(form[2])]],
predict(ridge_regression(form, training(folds$splits[[i]]), lambda), testing(folds$splits[[i]])))
rmses <- foreach(lambda = c(0.1,0.2), .combine = rbind) %dopar% {
foreach(i = seq_len(nrow(folds)), .combine = c) %do% {
casl_util_rmse(testing(folds$splits[[i]])[[as.character(form[2])]],
predict(ridge_regression(form, training(folds$splits[[i]]), lambda), testing(folds$splits[[i]])))
}
}
folds <- vfold_cv(iris, 10)
form <- Sepal.Length~Sepal.Width
rmses <- foreach(lambda = c(0.1,0.2), .combine = rbind) %dopar% {
foreach(i = seq_len(nrow(folds)), .combine = c) %do% {
casl_util_rmse(testing(folds$splits[[i]])[[as.character(form[2])]],
predict(ridge_regression(form, training(folds$splits[[i]]), lambda), testing(folds$splits[[i]])))
}
}
form <- Sepal.Length~Sepal.Width
folds <- vfold_cv(iris, 10)
rmses <- foreach(lambda = c(0.1,0.2), .combine = rbind) %dopar% {
foreach(i = seq_len(nrow(folds)), .combine = c) %do% {
casl_util_rmse(testing(folds$splits[[i]])[[as.character(form[2])]],
predict(ridge_regression(form, training(folds$splits[[i]]), lambda), testing(folds$splits[[i]])))
}
}
rmses <- foreach(lambda = c(0.1,0.2), .combine = rbind) %dopar% {
foreach(i = seq_len(nrow(folds)), .combine = c) %do% {
casl_util_rmse(testing(folds$splits[[i]])[[as.character(form[2])]],
ridge_predict(ridge_regression(form, training(folds$splits[[i]]), lambda), testing(folds$splits[[i]])))
}
}
testing(folds$splits[[i]]
(testing(folds$splits[[i]])[[as.character(form[2])]]
testing(folds$splits[[i]])[[as.character(form[2])]]
testing(folds$splits[[i]])[[as.character(form[2])]]
testing(folds$splits[[1]])[[as.character(form[2])]]
testing(folds$splits[[i]])
testing(folds$splits[[1]])
?casl_util_rmse
casl_util_rmse(testing(folds$splits[[i]])[[as.character(form[2])]],
ridge_predict(ridge_regression(form, training(folds$splits[[i]]), lambda), testing(folds$splits[[i]])))
casl_util_rmse(testing(folds$splits[[1]])[[as.character(form[2])]],
ridge_predict(ridge_regression(form, training(folds$splits[[1]]), lambda), testing(folds$splits[[1]])))
casl_util_rmse(testing(folds$splits[[1]])[[as.character(form[2])]],
ridge_predict(ridge_regression(form, training(folds$splits[[1]]), 0.1), testing(folds$splits[[1]])))
ridge_predict(ridge_regression(form, training(folds$splits[[1]]), 0.1), testing(folds$splits[[1]]))
ridge_predict <- function(object, ...) {
dots <- list(...)
x_frame <- dots[[1]]
if (!is.data.frame(x_frame)) {
stop(red("The first argument should be a data.frame of values",
"to predict"))
}
X <- model.matrix(attributes(object)$formula, x_frame)
X %*% object
}
x<-ridge_regression(Sepal.Length~Sepal.Width, iris, 0.1)
ridge_predict(x, iris)
ridge_predict(ridge_regression(form, training(folds$splits[[1]]), 0.1), testing(folds$splits[[1]]))
ridge_predict(ridge_regression(Sepal.Length~Sepal.Width, iris, 0.1), iris)
training(folds$splits[[1]])
testing(folds$splits[[1]])
ridge_predict(ridge_regression(form, training(folds$splits[[1]]), 0.1), testing(folds$splits[[1]]))
predict.ridge_regression <- function(object, ...) {
dots <- list(...)
x_frame <- dots[[1]]
if (!is.data.frame(x_frame)) {
stop(red("The first argument should be a data.frame of values",
"to predict"))
}
X <- model.matrix(attributes(object)$formula, x_frame)
X %*% object
}
rmses <- foreach(lambda = c(0.1,0.2), .combine = rbind) %dopar% {
foreach(i = seq_len(nrow(folds)), .combine = c) %do% {
casl_util_rmse(testing(folds$splits[[i]])[[as.character(form[2])]],
predict(ridge_regression(form, training(folds$splits[[i]]), lambda), testing(folds$splits[[i]])))
}
}
rmses <- foreach(lambda = c(0.1,0.2), .combine = rbind) %dopar% {
foreach(i = seq_len(nrow(folds)), .combine = c) %do% {
casl_util_rmse(testing(folds$splits[[i]])[[as.character(form[2])]],
predict(ridge_regression(form, training(folds$splits[[i]]), lambda), testing(folds$splits[[i]])))
}
}
predict(ridge_regression(form, training(folds$splits[[1]]), 0.1), testing(folds$splits[[1]]))
rmses <- foreach(lambda = c(0.1,0.2), .combine = rbind) %dopar% {
foreach(i = seq_len(nrow(folds)), .combine = c) %do% {
casl_util_rmse(testing(folds$splits[[i]])[[as.character(form[2])]],
predict(ridge_regression(form, training(folds$splits[[i]]), lambda), testing(folds$splits[[i]])))
}
}
predict(ridge_regression(form, training(folds$splits[[1]]), 0.1), testing(folds$splits[[1]]))
ridge_regression(form, training(folds$splits[[1]]), 0.1)
ridge_regression(Sepal.Length~Sepal.Width, training(folds$splits[[1]]), 0.1)
training(folds$splits[[1]])
form
ridge_regression(form, training(folds$splits[[1]]), 0.1)
ridge_regression(Sepal.Length~Sepal.Width, iris, 0.1)
ridge_regression(form, iris, 0.1)
training(folds$splits[[1]])
ridge_regression(form, training(folds$splits[[1]]), 0.1)
ridge_regression(form, training(folds$splits[[1]]), 0.1)
training(folds$splits[[1]])
folds$splits[[1]]
training(folds$splits[[1]])
ridge_regression(form, training(folds$splits[[1]]), 0.1)
